#include "dvision/distortionModel.hpp"
#include "dvision/camera.hpp"
#include <gtest/gtest.h>

using namespace dvision;
using namespace cv;
using namespace std;

TEST(distortionModel, main)
{
//    Mat cameraMatrix = (Mat_<double>(3, 3) <<
//                                           360.2220950386325, 0, 312.8526054979694,
//        0, 359.7222082596309, 232.6636655790015,
//        0, 0, 1
//    );
//
//    Mat distCoeff = (Mat_<double>(1, 14) <<
//                                         2.293017547001427,
//        -3.183188689372681,
//        -0.001181441252823593,
//        0.001390751807129497,
//        -0.8431947127936348,
//        2.628877937368619,
//        -2.41756587396144,
//        -2.155039440453934,
//        -0.0005918946433141345,
//        -0.001745856567349353,
//        0.01935547810201202,
//        -0.006166332750534658,
//        -0.01228420674970762,
//        0.002726368283767786);
    Mat cameraMatrix = (Mat_<double>(3, 3) <<
    360.591090231311, 0, 310.7131585594641,
    0, 360.4918824799427, 252.0890520277582,
    0, 0, 1
    );

    Mat distCoeff = (Mat_<double>(1, 14) <<
    12.17446992931163,
    9.674181625244897,
    -9.979700211544175e-05,
    -0.0001482121838188539,
    0.6561453924261769,
    12.50596489391226,
    13.94603005487614,
    2.886257323576563,
    0.001526969658511264,
    -0.0002591965834689962,
    0.0001776014517591451,
    7.26029339820618e-05,
    0.0005823374570643553,
    0.001257762144819584
    );

    DistortionModel dist(Size(640, 480), cameraMatrix, distCoeff);

    dvision::Camera c;
    while (ros::ok()) {
        auto frame = c.capture();
        frame.show();


        Mat dst;
//        imshow("raw", img);
//        waitKey(0);
        dist.undistortImage(frame.getRGB(), dst);

        namedWindow("undist", CV_WINDOW_NORMAL);
        imshow("undist", dst);
//        waitKey(0);
    }

//    Mat img = imread("/home/mwx/Pictures/calibration/1495341982875198303.png"), dst;
//    imshow("raw", img);
//    waitKey(0);
//    dist.undistortImage(img, dst);
//
//    namedWindow("undist", CV_WINDOW_NORMAL);
//    imshow("undist", dst);
//    waitKey(0);
}

int
main(int argc, char** argv)
{
    ros::init(argc, argv, "capture");
    ros::NodeHandle nh;



    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

// -------------cameraMatrix--------------
// [3 x 3]
// [375.0329245163845, 0, 333.425467117812;
//  0, 371.7363174866422, 258.6764129612715;
//  0, 0, 1]
// ---------------distCoeffs--------------
// [1 x 14]
// [-0.1238699435322457;
//  2.272671826783335;
//  0.001680597501468876;
//  -0.0004516286381935245;
//  0.348627835181028;
//  0.2261706238550091;
//  2.174596312337722;
//  1.127177366910493;
//  0.009636570316125281;
//  -0.001494059533024259;
//  -0.04040591328900087;
//  0.01032415996679334;
//  0.03141385670627844;
//  0.006697454979984255]

//-------------cameraMatrix--------------
//[3 x 3]
//[360.3313476147914, 0, 312.1971561771676;
//0, 360.2296996280963, 253.1193397265325;
//0, 0, 1]
//---------------distCoeffs--------------
//[1 x 14]
//[4.3429088709082;
//3.196286575780622;
//-0.0003025159687228137;
//-0.0001664890371958519;
//0.2102722313513976;
//4.684242674784063;
//4.669300735337838;
//0.93805194138856;
//0.0005303986112903846;
//-0.0001259742267611774;
//-0.0002959179851642753;
//0.000158771154566179;
//0.002788386911697234;
//-0.00054791686849542]

//Re-projection error reported by calibrateCamera: 0.189783
//-------------cameraMatrix--------------
//[3 x 3]
//[360.591090231311, 0, 310.7131585594641;
//0, 360.4918824799427, 252.0890520277582;
//0, 0, 1]
//---------------distCoeffs--------------
//[1 x 14]
//[12.17446992931163;
//9.674181625244897;
//-9.979700211544175e-05;
//-0.0001482121838188539;
//0.6561453924261769;
//12.50596489391226;
//13.94603005487614;
//2.886257323576563;
//0.001526969658511264;
//-0.0002591965834689962;
//0.0001776014517591451;
//7.26029339820618e-05;
//0.0005823374570643553;
//0.001257762144819584]
//
